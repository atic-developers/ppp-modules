<?php

/**
 * @file
 * comportaments a mida per Pam a Pam: Mapes
 * AGPLv3 :)
 */

/**
 * Implements hook_leaflet_map_info().
 *
 * Return a default map for the module.
 */
function ppp_mapes_leaflet_map_info() {
  return array(
    'Pam a Pam' =>
    array(
      'label' => 'Pam a Pam',
      'description' => t('Mapa base per Pam a Pam'),
      'settings' => array(
        'minZoom' => 0,
        'maxZoom' => 18,
        'dragging' => TRUE,
        'touchZoom' => TRUE,
        'scrollWheelZoom' => TRUE,
        'doubleClickZoom' => TRUE,
        'zoomControl' => TRUE,
        'attributionControl' => TRUE,
        'trackResize' => TRUE,
        'fadeAnimation' => TRUE,
        'zoomAnimation' => TRUE,
        'closePopupOnClick' => TRUE,
        // Params de markercluster.
        'animateAddingMarkers' => FALSE,
        'disableClusteringAtZoom' => NULL,
        'maxClusterRadius' => 80,
        'showCoverageOnHover' => TRUE,
        'singleMarkerMode' => FALSE,
        'skipDuplicateAddTesting' => FALSE,
        'spiderfyOnMaxZoom' => TRUE,
        'zoomToBoundsOnClick' => TRUE,
        'addRegionToolTips' => FALSE,
      ),
      'layers' => array(
        'earth' => array(
          'urlTemplate' => 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          'options' => array(
            'attribution' => 'OSM Mapnik',
          ),
        ),
      ),
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function ppp_mapes_block_info() {
  $blocks['ppp_mapes_mapahome'] = array(
    'info' => t('Pam a Pam main map'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function ppp_mapes_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'ppp_mapes_mapahome':
      $form['ppp_mapes_taxo1'] = array(
        '#type' => 'textfield',
        '#title' => 'taxo 1',
        '#default_value' => variable_get('ppp_mapes_taxo1', ''),
      );
      $form['ppp_mapes_geojson'] = array(
        '#type' => 'textfield',
        '#title' => 'GeoJSON source for map points',
        '#default_value' => variable_get('ppp_mapes_geojson', ''),
      );
      break;
  }
  return $form;

}

/**
 * Implements hook_block_save().
 */
function ppp_mapes_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'ppp_mapes_mapahome':
      variable_set('ppp_mapes_taxo1', $edit['ppp_mapes_taxo1']);
      variable_set('ppp_mapes_geojson', $edit['ppp_mapes_geojson']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function ppp_mapes_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ppp_mapes_mapahome':
      global $base_url;
      $block['subject'] = '';
      $output = '';
      $map = leaflet_map_get_info('Pam a Pam');
      $result = drupal_http_request($base_url . variable_get('ppp_mapes_geojson', ''));
      $points = '';
      if (in_array($result->code, array(200, 304))) {
        $json_string = (isset($result->data)) ? $result->data : '';
        $points = drupal_json_decode($json_string);
      }
      else {
        drupal_set_message(t('Invalid source for GeoJSON data: @source', array('@source' => variable_get('ppp_mapes_geojson', ''))), 'error');
      }

      $features = array(
        array(
          'type' => 'json',
          'json' => $points,
          'properties' => array(
            'leaflet_id' => 'ppp_geojson_main',
          ),
        ),
      );
      $output = leaflet_render_map($map, $features, ' 400px');

      $block['content'] = $output;
      break;
  }

  return $block;
}
